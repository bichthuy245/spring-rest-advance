package com.nashtech.training.rest.shape;import com.fasterxml.jackson.databind.ObjectMapper;import com.nashtech.training.shape.model.ShapeAttribute;import com.nashtech.training.shape.model.ShapeCategory;import com.nashtech.training.shape.repository.ShapeCategoryRepository;import com.nashtech.training.shape.repository.ShapeRepository;import com.nashtech.training.shape.service.ShapeService;import org.json.JSONException;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.skyscreamer.jsonassert.JSONAssert;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.boot.test.web.client.TestRestTemplate;import org.springframework.http.*;import org.springframework.test.context.ActiveProfiles;import org.springframework.test.context.junit4.SpringRunner;import java.util.*;import static org.junit.Assert.assertEquals;import static org.mockito.Mockito.*;import static org.mockito.Mockito.times;@RunWith(SpringRunner.class)@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) // for restTemplate@ActiveProfiles("test")public class ShapeControllerRestTest {    private static final ObjectMapper om = new ObjectMapper();    @Autowired    private TestRestTemplate restTemplate;    @MockBean    private ShapeRepository mockRepository;    @MockBean    private ShapeCategoryRepository mockCategoryRepository;    @MockBean    private ShapeService mockService;    @Before    public void init() {        ShapeCategory category = new ShapeCategory();        category.setId(1L);        category.setName("SQUARE");        category.setAreaFormula("a*a");        category.getAttributes().add(new ShapeAttribute("a", category));        when(mockService.getCategory(1L)).thenReturn(Optional.of(category));    }    @Test    public void testGetShapeCategotyByIdWithOK() throws JSONException {        String expected = "{" +                "        \"id\": 1," +                "        \"name\": \"SQUARE\"," +                "        \"areaFormula\": \"a*a\"," +                "        \"attributes\": [" +                "            \"a\"" +                "        ]" +                "}";//        HttpHeaders headers = new        ResponseEntity<String> response = restTemplate.getForEntity("/api/shape/category/1", String.class);        assertEquals(HttpStatus.OK, response.getStatusCode());        assertEquals(MediaType.APPLICATION_JSON, response.getHeaders().getContentType());        JSONAssert.assertEquals(expected, response.getBody(), false);        verify(mockService, times(1)).getCategory(1L);    }    @Test    public void testGetAllShapeCategotyWithOK() throws Exception {        String expected = "[" +                "{" +                "        \"id\": 1," +                "        \"name\": \"TRIANGLE\"," +                "        \"areaFormula\": \"(sqrt( (a+b+c) * (a+b-c) * (b+c-a) * (c+a-b)))/4\"," +                "        \"attributes\": [" +                "            \"a\"," +                "            \"b\"," +                "            \"c\"" +                "        ]" +                "    }," +                "    {" +                "        \"id\": 2," +                "        \"name\": \"SQUARE\"," +                "        \"areaFormula\": \"a*a\"," +                "        \"attributes\": [" +                "            \"a\"" +                "        ]" +                "    }" +                "]";        List<ShapeCategory> shapeCategoryList = new ArrayList<>();        ShapeCategory category1 = new ShapeCategory();        category1.setId(1L);        category1.setName("TRIANGLE");        category1.setAreaFormula("(sqrt( (a+b+c) * (a+b-c) * (b+c-a) * (c+a-b)))/4");        category1.getAttributes().add(new ShapeAttribute("a", category1));        category1.getAttributes().add(new ShapeAttribute("c", category1));        category1.getAttributes().add(new ShapeAttribute("b", category1));        ShapeCategory category2 = new ShapeCategory();        category2.setId(2L);        category2.setName("SQUARE");        category2.setAreaFormula("a*a");        category2.getAttributes().add(new ShapeAttribute("a", category2));        shapeCategoryList.addAll(Arrays.asList(category1, category2));        when(mockService.getAllCategoryFull()).thenReturn(shapeCategoryList);        ResponseEntity<String> response = restTemplate.getForEntity("/api/shape/categories", String.class);        assertEquals(HttpStatus.OK, response.getStatusCode());        JSONAssert.assertEquals(expected, response.getBody(), false);        verify(mockService, times(1)).getAllCategoryFull();    }////    @Test//    public void testShapeCategoryIdNotFound404() throws Exception {////        String expected = "{status:404,error:\"Not Found\",message:\"ShapeCategory id not found : 10\",path:\"/api/shape/5\"}";////        ResponseEntity<String> response = restTemplate.getForEntity("/api/shape/5", String.class);////        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());//        JSONAssert.assertEquals(expected, response.getBody(), false);////    }////    @Test//    public void testSaveShapeCategoryWithOK() throws Exception {//        String expected = "{" +//                "        \"id\": 1," +//                "        \"name\": \"RECTANGLE\"," +//                "        \"areaFormula\": \"l*w\"" +////                "        \"attributes\": [" +////                "            \"l\"," +////                "            \"w\"" +////                "        ]" +//                "}";////        ShapeCategory newShapeCategory = new ShapeCategory();//        newShapeCategory.setName("RECTANGLE");//        newShapeCategory.setAreaFormula("l*w");//        newShapeCategory.setAttributes(null);//        when(mockService.saveCategory(any(ShapeCategory.class))).thenReturn(newShapeCategory);//////        ResponseEntity<String> response = restTemplate.postForEntity("/api/shape/category/save",//                newShapeCategory, String.class);////        assertEquals(HttpStatus.CREATED, response.getStatusCode());//        JSONAssert.assertEquals(expected, response.getBody(), false);////        verify(mockService, times(1)).saveCategory(any(ShapeCategory.class));////    }}