package com.nashtech.training.rest.shape;import com.fasterxml.jackson.databind.ObjectMapper;import com.nashtech.training.shape.model.ShapeAttribute;import com.nashtech.training.shape.model.ShapeCategory;import com.nashtech.training.shape.service.ShapeService;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.test.context.ActiveProfiles;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.test.web.servlet.MockMvc;import java.util.*;import static org.hamcrest.Matchers.is;import static org.hamcrest.collection.IsCollectionWithSize.hasSize;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;@RunWith(SpringRunner.class)@SpringBootTest@AutoConfigureMockMvc@ActiveProfiles("test")public class ShapeControllerBasicTest {    private static final String TOKEN = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYXNodGVjaCIsImV4cCI6MTYwMjM0ODk" +            "3MywiaWF0IjoxNjAyMzEyOTczfQ.Rr26YKjI3vEDZ8hYUxUUJ1bNQSYTam7AVlkOW40HqGs";    private static final ObjectMapper om = new ObjectMapper();    @Autowired    private MockMvc mockMvc;    @Autowired    private ShapeService mockShapeService;    @Test    public void getAllCategoriesWithOK() throws Exception {        mockMvc.perform(get("/api/shape/categories")                .header(HttpHeaders.AUTHORIZATION,                "Bearer " + TOKEN, HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))                .andExpect(content().contentType(MediaType.APPLICATION_JSON))                .andExpect(status().isOk())                .andExpect(jsonPath("$", hasSize(6)))                .andExpect(jsonPath("$[0].id", is(1)))                .andExpect(jsonPath("$[0].name", is("TRIANGLE")))                .andExpect(jsonPath("$[0].areaFormula", is("(sqrt( (a+b+c) * (a+b-c) * (b+c-a) * (c+a-b)))/4")))                .andExpect(jsonPath("$[0].attributes", is(Arrays.asList("a", "b", "c"))))                .andExpect(jsonPath("$[1].id", is(2)))                .andExpect(jsonPath("$[1].name", is("SQUARE")))                .andExpect(jsonPath("$[1].areaFormula", is("a*a")))                .andExpect(jsonPath("$[1].attributes", is(Arrays.asList("a"))))                .andExpect(jsonPath("$[2].id", is(3)))                .andExpect(jsonPath("$[2].name", is("RECTANGLE")))                .andExpect(jsonPath("$[2].areaFormula", is("l*w")))                .andExpect(jsonPath("$[2].attributes", is(Arrays.asList("w", "l"))))                .andExpect(jsonPath("$[3].id", is(4)))                .andExpect(jsonPath("$[3].name", is("PARALLELOGRAM")))                .andExpect(jsonPath("$[3].areaFormula", is("a*h")))                .andExpect(jsonPath("$[3].attributes", is(Arrays.asList("a", "h"))))                .andExpect(jsonPath("$[4].id", is(5)))                .andExpect(jsonPath("$[4].name", is("CIRCLE")))                .andExpect(jsonPath("$[4].areaFormula", is("r*r*3.14")))                .andExpect(jsonPath("$[4].attributes", is(Arrays.asList("r"))));    }    @Test    public void findShapeCategoryIdWithStatusOK() throws Exception {        mockMvc.perform(get("/api/shape/category/2")                .header(HttpHeaders.AUTHORIZATION,                        "Bearer " + TOKEN, HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))                .andExpect(content().contentType(MediaType.APPLICATION_JSON))                .andExpect(status().isOk())                .andExpect(jsonPath("$.id", is(2)))                .andExpect(jsonPath("$.name", is("SQUARE")))                .andExpect(jsonPath("$.areaFormula", is("a*a")))                .andExpect(jsonPath("$.attributes", is(Arrays.asList("a"))));    }    @Test    public void findShapeCategoryIdWithStatusNotFound() throws Exception {        mockMvc.perform(get("/api/shape/category/8")                .header(HttpHeaders.AUTHORIZATION,                        "Bearer " + TOKEN, HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))                .andExpect(status().isNotFound());    }    @Test    public void saveShapeCategoryWithStatusOK() throws Exception {        ShapeCategory newShapeCategory = new ShapeCategory();        newShapeCategory.setName("TRAPEZIUM");        newShapeCategory.setAreaFormula("((a+b) *2) / h");        newShapeCategory.getAttributes().add(new ShapeAttribute("a", newShapeCategory));        newShapeCategory.getAttributes().add(new ShapeAttribute("b", newShapeCategory));        newShapeCategory.getAttributes().add(new ShapeAttribute("h", newShapeCategory));        mockShapeService.saveCategory(newShapeCategory);        mockMvc.perform(get("/api/shape/categories")                .header(HttpHeaders.AUTHORIZATION,                        "Bearer " + TOKEN, HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))                .andExpect(status().isOk())                .andExpect(jsonPath("$[5].id", is(6)))                .andExpect(jsonPath("$[5].name", is("TRAPEZIUM")))                .andExpect(jsonPath("$[5].areaFormula", is("((a+b) *2) / h")))                .andExpect(jsonPath("$[5].attributes", is(Arrays.asList("a", "b", "h"))));    }    @Test    public void givenNoToken_whenGetSecureRequest_thenUnauthorized() throws Exception {        mockMvc.perform(get("/api/shape/categories"))                .andExpect(status().isForbidden());    }}